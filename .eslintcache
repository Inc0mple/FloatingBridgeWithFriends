[{"D:\\ProjectsLocal\\onlinesgbridge\\src\\index.js":"1","D:\\ProjectsLocal\\onlinesgbridge\\src\\App.js":"2","D:\\ProjectsLocal\\onlinesgbridge\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":6726,"mtime":1612105146768,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1aqrtcj",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\ProjectsLocal\\onlinesgbridge\\src\\index.js",[],["17","18"],"D:\\ProjectsLocal\\onlinesgbridge\\src\\App.js",["19","20","21"],"import \"./App.css\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport 'firebase/analytics';\n\n\n// Hooks\nimport React, { useRef, useState} from 'react';\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nconst stc = require('string-to-color');\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyC-_2lgV0vNeVOe6cpDJ9c_xLo85QhpPxg\",\n  authDomain: \"onlinesgbridge.firebaseapp.com\",\n  projectId: \"onlinesgbridge\",\n  storageBucket: \"onlinesgbridge.appspot.com\",\n  messagingSenderId: \"338515223390\",\n  appId: \"1:338515223390:web:55d9fd31c0977a2f6425cf\",\n  measurementId: \"G-HGEQPFX11X\",\n}\n\nfirebase.initializeApp(firebaseConfig);\n\n// Code below required to prevent reinitialisation of\n// firebase app with same config (which is not allowed) during hot reload\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\n\n\nfunction App() {\n\n  const [user,loading, error] = useAuthState(auth);\n  \n  //const UserContext = createContext(user);\n  return (\n    <div className=\"App\">\n      <header>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <Profile /> : <></>}\n        {user ? <MainChat /> : <SignIn />}\n        \n      </section>\n    </div>\n  );\n}\n\n// 'SignIn' functional component\nfunction SignIn() {\n  const handleSignInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider).then((result) => {\n      console.log(`Succesfully signed in with Google as ${result.user[1]}`)\n    }).catch((error) => {\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      console.log(`Error Signing in with Google.\n       errorCode: ${errorCode}\n       errorMessage: ${errorMessage}`)\n    });\n  }\n  const assignDisplayName = (inputName = null) => {\n    let user = firebase.auth().currentUser\n      user.updateProfile({\n      displayName: inputName + ' (Guest)',\n      photoURL: \"https://icon-library.com/images/no-user-image-icon/no-user-image-icon-26.jpg\"\n    }).then(function() {\n      console.log(`Successfully assigned ${auth.currentUser.uid}'s displayName as ${auth.currentUser.displayName}`);\n    }).catch(function(error) {\n      var errorCode = error.code;\n        var errorMessage = error.message;\n        console.log(`Assigning displayName to ${auth.currentUser.uid}.\n       errorCode: ${errorCode}\n       errorMessage: ${errorMessage}`);\n    });\n  }\n\n  const handleSignInAsGuest = (inputName = null) => {\n    //e.preventDefault()\n    firebase\n      .auth()\n      .signInAnonymously()\n      .then(() => {\n        assignDisplayName(inputName)\n      }).then(()=>{\n        console.log(\"Succesfully signed in as Guest\");\n      })\n      .catch((error) => {\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        console.log(`Error signing in as Guest.\n       errorCode: ${errorCode}\n       errorMessage: ${errorMessage}`);\n      });\n  };\n const [guestName, setguestName] = useState('');\n\n const handleSubmit = (e) => {\n  e.preventDefault();\n  handleSignInAsGuest(guestName)\n}\n\n  return (\n    <div>\n      <button onClick={handleSignInWithGoogle}>Sign in with Google</button>\n      <form onSubmit={handleSubmit}>\n        <input value={guestName} onChange={(e) => setguestName(e.target.value)} />\n        <button type='submit' disabled={!guestName}>Sign in as Guest</button>\n      </form>\n    </div>\n  );\n}\n\nfunction SignOut() {\n  const handleSignOut = () => {\n    auth.signOut().then(() => {\n      console.log('Succesfully signed out')\n    }).catch((error) => {\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      console.log(`Error signing out.\n       errorCode: ${errorCode}\n       errorMessage: ${errorMessage}`)\n    });\n  }\n\n  return auth.currentUser && (\n    <button onClick={handleSignOut}>Sign Out</button>\n  )\n}\nfunction Profile() {\n  const [displayName, setDisplayName] = useState(\"Loading...\");\n  const [photoURL, setphotoURL] = useState(null);\n  const user = firebase.auth().currentUser;\n  const uid = user.uid\n  user.reload().then(() => {\n    const refreshUser = firebase.auth().currentUser;\n    setDisplayName(refreshUser.displayName)\n    setphotoURL(refreshUser.photoURL)\n  })\n  //const { uid, photoURL, displayName} = auth.currentUser;\n  return(\n    <>\n      <img alt={`photoURL${photoURL}`} src={photoURL || 'https://icon-library.com/images/no-user-image-icon/no-user-image-icon-26.jpg'} />\n      <span>Signed in as <span style={{color : stc(uid), textShadow:\"1px 1px 2px #000000\"}}>{displayName}</span></span>\n    </>\n  )\n}\n\nfunction MainChat() {\n  //Not sure what this dummy ref thing does. Need to investigate further\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy(\"createdAt\").limitToLast(30);\n\n  //hooks (analogous to setState)\n  const [messages] = useCollectionData(query, {idField:'id'});\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async(e) => {\n    // Stops form from refreshing page on submit,\n    // which is the default behaviour.\n    e.preventDefault();\n\n    const { uid, photoURL, displayName} = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n      displayName\n    })\n    //console.log(auth.currentUser)\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n        <span ref={dummy}></span>\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} />\n        <button type='submit' disabled={!formValue}>Send Message</button>\n      </form>\n    </>\n  )\n}\n\n\nfunction ChatMessage(props) {\n  const {text, uid, photoURL, displayName} = props.message;\n\n  // check if msg is sent or received by comparing uid\n  // can be used to apply CSS styling conditionally\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n  const isYou = uid === auth.currentUser.uid ? '(You)' : '';\n\n  return (\n  <div className={`message ${messageClass}`}>\n    <img alt={`photoURL${photoURL}`} src={photoURL || 'https://icon-library.com/images/no-user-image-icon/no-user-image-icon-26.jpg'} />\n    <p className='messageP' style={{color : stc(uid), textShadow:\"1px 1px 2px #000000\"}}>{displayName} {isYou}</p><p className='messageP'>: {text}</p>\n  </div>\n\n  )\n}\n\nexport default App;\n","D:\\ProjectsLocal\\onlinesgbridge\\src\\reportWebVitals.js",[],["22","23"],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":36,"column":7,"nodeType":"30","messageId":"31","endLine":36,"endColumn":16},{"ruleId":"28","severity":1,"message":"32","line":42,"column":15,"nodeType":"30","messageId":"31","endLine":42,"endColumn":22},{"ruleId":"28","severity":1,"message":"33","line":42,"column":24,"nodeType":"30","messageId":"31","endLine":42,"endColumn":29},{"ruleId":"24","replacedBy":"34"},{"ruleId":"26","replacedBy":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'analytics' is assigned a value but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'error' is assigned a value but never used.",["36"],["37"],"no-global-assign","no-unsafe-negation"]